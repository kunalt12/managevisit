/*
 * angular-cc-autorefresh
 * http://projects.codingmonster.co.uk/angular-cc-autorefresh

 * Version: 0.3.0 - 2015-11-21
 * License: MIT
 */
angular.module("cc.autorefresh",["cc.autorefresh.tpls","cc.autorefresh.ccAutoRefreshFn","cc.autorefresh.ccAutoRefreshBtn"]),angular.module("cc.autorefresh.tpls",["app/vendor/angular-ccacca/autoRefresh/ccAutoRefreshBtn.html"]),angular.module("cc.autorefresh.ccAutoRefreshFn",[]).factory("_ccAutoRefreshUtils",["$injector",function(a){"use strict";function b(){return a.has("ccExceptionPolicies")?a.get("ccExceptionPolicies"):d}var c=angular.version.minor>3?-1:0,d={promiseFinExPolicy:a.get("$exceptionHandler"),httpFailureFormatter:function(a){return a instanceof Error?a:{isHttpCancel:a&&a.status===c}}};return{resolveExPoliciesSvc:b}}]).directive("ccAutoRefreshFn",[function(){"use strict";return{restrict:"AE",scope:{refreshFn:"&",isPaused:"=?refreshPaused",interval:"=refreshInterval",model:"=refreshModel",isBusy:"=?refreshBusy",onRefreshed:"&refreshOnRefreshed"},controller:"ccAutoRefreshFnCtl"}}]).controller("ccAutoRefreshFnCtl",["$interval","$scope","$attrs","$q","_ccAutoRefreshUtils",function(a,b,c,d,e){function f(){u.forEach(function(a){a.resolve()}),u=[],b.isBusy=!1}function g(){v=angular.noop,f(),n()}function h(a,b){var c=a.indexOf(b);return-1!==c&&a.splice(c,1),c}function i(a){var c={when:new Date,caches:a};return b.onRefreshed({eventArgs:c}),a}function j(){return s=e.resolveExPoliciesSvc(),Object.defineProperties(t,{interval:{get:function(){return parseInt(b.interval,10)}},isDisabled:{get:function(){return b.$parent.$eval(c.ngDisabled)}},isPaused:{get:function(){return b.isPaused},set:function(a){b.isPaused=a}},isRefreshing:{get:function(){return u.length>0}},isVisible:{get:function(){return c.ngHide?!b.$parent.$eval(c.ngHide):!0}}}),t.cancelRefresh=f,t.refresh=k,t.togglePause=o,b.$on("$destroy",g),null==b.model?k().finally(q):(q(),null)}function k(){function a(){try{var a={cancellationToken:f.promise};return c.ccAutoRefreshFn?b.$parent.$eval(c.ccAutoRefreshFn,a):b.refreshFn(a)}catch(e){return d.reject(e)}}function e(a){var b=s.httpFailureFormatter(a);return b.isHttpCancel||(t.isPaused=!0,n()),d.reject(a)}if(t.isDisabled)return d.when(null);b.isBusy=!0;var f=d.defer();return u.push(f),d.when(a()).then(v).then(i).catch(e).catch(s.promiseFinExPolicy).finally(function(){b.isBusy=!1,h(u,f)})}function l(){n();var a=t.interval;a&&!t.isPaused&&m(a)}function m(b){r=a(k,b)}function n(){r&&a.cancel(r)}function o(){t.isPaused=!t.isPaused}function p(){return{interval:t.interval,isPaused:t.isPaused}}function q(){b.$watch(p,l,!0)}var r,s,t=this,u=[],v=function(a){return b.model=a,a};j()}]),angular.module("cc.autorefresh.ccAutoRefreshBtn",["cc.autorefresh.ccAutoRefreshFn"]).directive("ccAutoRefreshBtn",[function(){"use strict";return{restrict:"E",require:"^ccAutoRefreshFn",transclude:!0,replace:!0,scope:!0,templateUrl:"app/vendor/angular-ccacca/autoRefresh/ccAutoRefreshBtn.html",controller:[function(){}],link:function(a,b,c,d){a.ctrl=d}}}]).directive("ccTranscludeAppend",[function(){"use strict";return{restrict:"A",controller:["$element","$transclude",function(a,b){if(!b)throw new Error("Illegal use of ngTransclude directive in the template! No parent directive that requires a transclusion found. ");this.$transclude=b}],link:function(a,b,c,d){d.$transclude(function(a){b.append(a)})}}}]),angular.module("app/vendor/angular-ccacca/autoRefresh/ccAutoRefreshBtn.html",[]).run(["$templateCache",function(a){a.put("app/vendor/angular-ccacca/autoRefresh/ccAutoRefreshBtn.html",'<div class="btn-group" ng-show="ctrl.isVisible">\n    <button type="button" class="btn btn-default"\n            ng-click="ctrl.togglePause()" \n            ng-disabled="ctrl.isDisabled || ctrl.isRefreshing" \n            title="{{ctrl.isPaused ? \'Resume\' : \'Pause\'}}">\n        <i class="glyphicon" ng-class="{\n            \'glyphicon-pause\': !ctrl.isPaused, \n            \'glyphicon-play\': ctrl.isPaused }"></i>\n    </button>\n    <button type="button" class="btn btn-default" \n            ng-click="ctrl.isRefreshing ? ctrl.cancelRefresh() : ctrl.refresh()" \n            ng-disabled="ctrl.isDisabled" \n            title="{{ctrl.isRefreshing ? \'Cancel refresh\': \'Refresh now\'}}"\n            cc-transclude-append>\n        <i class="glyphicon" ng-class="{ \n            \'glyphicon-refresh\': !ctrl.isRefreshing, \n            \'glyphicon-minus-sign\': ctrl.isRefreshing }"></i>\n    </button>\n</div>')}]);